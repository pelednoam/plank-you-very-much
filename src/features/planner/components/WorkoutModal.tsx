\'use client\';\n\nimport React, { useEffect } from \'react\';\nimport { useForm, SubmitHandler, Controller } from \'react-hook-form\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport * as z from \'zod\';\nimport Modal from \'@/components/ui/Modal\';\nimport { usePlannerStore } from \'@/store/plannerStore\';\nimport type { Workout, WorkoutType } from \'@/types\';\nimport dayjs from \'dayjs\';\n\n// Validation Schema for the Workout form\nconst workoutSchema = z.object({\n  type: z.enum([\'CLIMB\', \'SWIM\', \'CORE\', \'STRENGTH\', \'REST\', \'MOBILITY\'], { required_error: \'Workout type is required\' }),\n  plannedAtDate: z.string().min(1, \'Date is required\'), // YYYY-MM-DD\n  plannedAtTime: z.string().min(1, \'Time is required\'), // HH:mm\n  durationMin: z.number().positive(\'Duration must be positive\').min(1, \'Duration must be at least 1 minute\'),\n  notes: z.string().optional(),\n  // mediaIds: z.array(z.string()).optional(), // Add later if needed\n});\n\ntype WorkoutFormData = z.infer<typeof workoutSchema>;\n\n// Workout Types constant\nconst WORKOUT_TYPES: WorkoutType[] = [\'CLIMB\', \'SWIM\', \'CORE\', \'STRENGTH\', \'MOBILITY\', \'REST\'];\n\ninterface WorkoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  workoutId?: string | null; // ID of workout to edit, or null/undefined for new\n  initialDate?: string; // YYYY-MM-DD for pre-filling date when adding new\n}\n\nexport default function WorkoutModal({ isOpen, onClose, workoutId, initialDate }: WorkoutModalProps) {\n  const { addWorkout, updateWorkout, removeWorkout, workouts } = usePlannerStore((state) => ({\n    addWorkout: state.addWorkout,\n    updateWorkout: state.updateWorkout,\n    removeWorkout: state.removeWorkout,\n    workouts: state.workouts, // Need this to get the workout data for editing\n  }));\n\n  const workoutToEdit = workoutId ? workouts.find(w => w.id === workoutId) : null;\n  const isEditing = !!workoutToEdit;\n\n  const {\n    register,\n    handleSubmit,\n    control, // For custom components like selects if needed\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm<WorkoutFormData>({\n    resolver: zodResolver(workoutSchema),\n    // Default values are set in useEffect based on isOpen and workoutToEdit\n  });\n\n  // Reset form when modal opens or workoutId changes\n  useEffect(() => {\n    if (isOpen) {\n        const defaultValues = {\n            type: workoutToEdit?.type ?? \'CORE\',\n            plannedAtDate: workoutToEdit ? dayjs(workoutToEdit.plannedAt).format(\'YYYY-MM-DD\') : initialDate ?? dayjs().format(\'YYYY-MM-DD\'),\n            plannedAtTime: workoutToEdit ? dayjs(workoutToEdit.plannedAt).format(\'HH:mm\') : \'09:00\',\n            durationMin: workoutToEdit?.durationMin ?? 30,\n            notes: workoutToEdit?.notes ?? \'\',\n        }\n        console.log(\'Resetting form with defaults:\', defaultValues);\n        reset(defaultValues);\n    }\n    // Only depend on isOpen, workoutId, workoutToEdit, initialDate for resetting logic\n  }, [isOpen, workoutId, workoutToEdit, initialDate, reset]);\n\n  const onSubmit: SubmitHandler<WorkoutFormData> = (data) => {\n    const plannedAtISO = dayjs(`${data.plannedAtDate}T${data.plannedAtTime}`).toISOString();\n    \n    const workoutData = {\n      type: data.type,\n      plannedAt: plannedAtISO,\n      durationMin: data.durationMin,\n      notes: data.notes,\n      // mediaIds: data.mediaIds, // Add later\n    };\n\n    try {\n        if (isEditing && workoutId) {\n            console.log(\'Updating workout:\', workoutId, workoutData);\n            updateWorkout(workoutId, workoutData);\n        } else {\n            console.log(\'Adding workout:\', workoutData);\n            addWorkout(workoutData);\n        }\n        onClose(); // Close modal on success\n    } catch (error) { \n        console.error(\"Failed to save workout:\", error);\ \n        // TODO: Show error message to user\n    }\n  };\n\n  const handleDelete = () => {\n    if (isEditing && workoutId && confirm(\'Are you sure you want to delete this workout?\')) {\n        try {\n            removeWorkout(workoutId);\n            onClose();\n        } catch (error) { \n            console.error(\"Failed to delete workout:\", error);\ \n            // TODO: Show error message to user\n        }\n    }\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} title={isEditing ? \'Edit Workout\' : \'Add Workout\'}>\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n        {/* Workout Type */} \n        <div>\n          <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type</label>\n          <select \